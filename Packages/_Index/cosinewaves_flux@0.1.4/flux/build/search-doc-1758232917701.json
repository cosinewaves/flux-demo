{"searchDocs":[{"title":"Unit","type":0,"sectionRef":"#","url":"/flux/api/Unit","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#types","content":" ","version":null,"tagName":"h2"},{"title":"StateCallback​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#StateCallback","content":"&lt;/&gt; type StateCallback = (...any) → ()? A function called during a lifecycle event. Can optionally return another function or nil.  ","version":null,"tagName":"h3"},{"title":"TransitionCallback<S>​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#TransitionCallback<S>","content":"&lt;/&gt; type TransitionCallback&lt;S&gt; = ( oldState: S, newState: S ) → () A function called whenever the Unit transitions between states. Receives the previous state and the new state as parameters.  ","version":null,"tagName":"h3"},{"title":"TransitionCheck<S>​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#TransitionCheck<S>","content":"&lt;/&gt; type TransitionCheck&lt;S&gt; = ( oldState: S, newState: S ) → boolean A predicate function called before transitioning between states. If it returns false, the transition is aborted.  ","version":null,"tagName":"h3"},{"title":"Unit<S>​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#Unit<S>","content":"&lt;/&gt; interface Unit&lt;S&gt; { state: S-- The current state of the Unit addState: ( self: Unit&lt;S&gt;, state: State&lt;S&gt; ) → ()-- Register a new state with optional lifecycle callbacks removeState: ( self: Unit&lt;S&gt;, stateName: S ) → ()-- Unregister a state by its name changeState: ( self: Unit&lt;S&gt;, newState: S, eager: boolean? ) → ()-- Transition to a new state (eager = force transition even if same) subscribe: ( self: Unit&lt;S&gt;, callback: TransitionCallback&lt;S&gt; ) → ()-- Register a callback fired on every state transition unsubscribe: ( self: Unit&lt;S&gt;, callback: TransitionCallback&lt;S&gt; ) → ()-- Remove a previously registered transition callback getStates: (self: Unit&lt;S&gt;) → {S}-- Returns all registered state names hasState: ( self: Unit&lt;S&gt;, stateName: S ) → boolean-- Returns true if a given state is registered reset: (self: Unit&lt;S&gt;) → ()-- Resets the Unit back to its initial state use: ( self: Unit&lt;S&gt;, middleware: Middleware&lt;S&gt; )-- Middleware functions which act per machine, instead of per state }  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#functions","content":" ","version":null,"tagName":"h2"},{"title":"addState​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#addState","content":"&lt;/&gt; Unit:addState(state: State&lt;S&gt;) → () ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Unit","url":"/flux/api/Unit##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#State<S>","content":"interface State&lt;S&gt; { name: S-- The unique name of the state onEnter: StateCallback?-- Called when entering the state onExit: StateCallback?-- Called when exiting the state onBeforeEnter: StateCallback?-- Called immediately before entering the state onAfterEnter: StateCallback?-- Called immediately after entering the state onBeforeExit: StateCallback?-- Called immediately before leaving the state onAfterExit: StateCallback?-- Called immediately after leaving the state }  You can add a state to the state machine, which can then be entered and exited with optional lifecycle events.  ","version":null,"tagName":"h3"},{"title":"removeState​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#removeState","content":"&lt;/&gt; Unit:removeState(stateName: S) → () Removes a state from the internal registry  ","version":null,"tagName":"h3"},{"title":"changeState​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#changeState","content":"&lt;/&gt; Unit:changeState( newState: S,-- The state to transition into eager?: boolean-- true = force transition even if old == new, false = lazy (default) ) → () Transitions the Unit from its current state to a new state. Sequence: Runs all middleware canTransition checks. If any returns false, the transition is aborted. Calls old state's lifecycle hooks (safely wrapped in pcall): onBeforeExit → onExit → onAfterExit Updates the Unit's state field. Calls new state's lifecycle hooks (safely wrapped in pcall): onBeforeEnter → onEnter → onAfterEnter Notifies all subscribers of the transition. If any lifecycle or subscriber throws, middleware onError hooks are invoked. Note: If the new state is not registered, lifecycle hooks are skipped, but the state value is still updated. onError middleware provides centralized error handling.  ","version":null,"tagName":"h3"},{"title":"subscribe​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#subscribe","content":"&lt;/&gt; Unit:subscribe(callback: TransitionCallback&lt;S&gt;) → () Registers a callback to be invoked whenever the Unit changes state. Sequence: After every successful state transition, the callback is called with (oldState, newState). Note: Callbacks should be pure functions without side effects that modify the Unit directly, to avoid unintended recursion.  ","version":null,"tagName":"h3"},{"title":"unsubscribe​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#unsubscribe","content":"&lt;/&gt; Unit:unsubscribe( callback: TransitionCallback&lt;S&gt;-- function(old: S, new: S) -&gt; () ) → () Unregisters a previously subscribed transition callback. Sequence: Removes the first matching callback reference from the subscriber list. If the callback was not registered, nothing happens. Note: The callback reference must be the same function object that was passed to subscribe.  ","version":null,"tagName":"h3"},{"title":"getStates​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#getStates","content":"&lt;/&gt; Unit:getStates() → {S}-- array of state names Returns a list of all registered state names in the Unit. Note: The order of states in the returned list is not guaranteed.  ","version":null,"tagName":"h3"},{"title":"hasState​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#hasState","content":"&lt;/&gt; Unit:hasState( stateName: S-- the state name to check ) → boolean-- true if the state is registered, false otherwise Checks whether a state with the given name is registered in the Unit.  ","version":null,"tagName":"h3"},{"title":"reset​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#reset","content":"&lt;/&gt; Unit:reset() → () Resets the Unit back to its initial state. Sequence: Calls changeState(initialState) internally, triggering lifecycle hooks and subscriber notifications.   ","version":null,"tagName":"h3"},{"title":"use​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#use","content":"&lt;/&gt; Unit:use(middleware: Middleware&lt;S&gt;) → () ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Unit","url":"/flux/api/Unit##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Unit","url":"/flux/api/Unit#Middleware<S>","content":"interface Middleware&lt;S&gt; { beforeChange: TransitionCallback&lt;S&gt;?-- Called before changing any state afterChange: TransitionCallback&lt;S&gt;?-- Called after changing any state canTransition: TransitionCallback&lt;S&gt;?-- Predicate function before changing any state onError: (error: string) → ()?,-- -- Called whenever a lifecycle hook, subscriber, or middleware throws an error }  Inserts a table of middleware into the machine. Middleware is different from lifecycles because it behaves per-machine, whereas lifecycle events behave per state. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}